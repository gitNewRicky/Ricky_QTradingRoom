/* 
 * Copyright (C)2017 PT. Stosia Teknologi Investasi
 *
 * This file is licensed under  GNU GPL (General Public License) version 3.
 *
 * File ini dilisensikan kepada Anda, bukan  Anda miliki.  Pemilik file ini
 * adalah pemegang  hak cipta ("copyright holder") di atas. Gunakanlah file
 * ini sesuai dengan lisensi yang telah ditetapkan untuk file ini.
 *
 * File ini  berlisensi  GNU GPL (General Public License)  versi 3. Artinya
 * kalau Anda  memodifikasi file ini, atau membuat karya lain yang berbasis
 * file ini  ("derivative work"),  maka Anda  wajib  mendistribusikan  kode
 * modifikasi atau karya tersebut kepada publik. Hal ini untuk menjaga agar
 * pengetahuan yang ada di sini menjadi lebih berkembang  di masa mendatang 
 * untuk kemajuan kita bersama.
 *
 * Silakan memakai kode ini untuk kepentingan apapun termasuk untuk mencari
 * profit di pasar saham baik secara perorangan atau organisasi, asal tidak
 * jahat. Sebagai tambahan permintaan, kami menghimbau untuk TIDAK  menjual
 * kode/file  ini secara  apa adanya  atau dalam bundel  produk yang dijual
 * secara komersial, karena hal itu tidak etis.
 *
 * Untuk penjelasan lebih lanjut silakan bertanya kepada kami.  Untuk detil
 * lisensi GPLv3  silakan lihat file GPLv3-LICENSE.md  yang didistribusikan
 * bersama file ini.
 *
 * Author: Benny Prijono <benny@stosia.com>
 * Contributors:
 *  - 
 */

_t0 = GetPerformanceCounter();
 
#include_once <..\Quant.id\AFL\Common.afl>
#include_once <..\Quant.id\AFL\ForeignFlow\ForeignFlowCommon.afl>

stSetBackgroundTitle(Name());
stSetBackgroundSubtitle("Foreign Flow System");
stSetBackgroundSubsubtitle(QID_VERSION_LINE);

//
// Price candlesticks
//
_SECTION_BEGIN("Price");
	SetChartOptions( 0, chartShowArrows|chartShowDates);
	
	_N(Title = StrFormat(QID_VERSION_LINE + " -- {{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " + WriteVal( V, 1.0 ) +" {{VALUES}}", 
						  O, H, L, C, SelectedValue( ROC( C, 1 )) ));
	Plot( C, "Close", colorDefault, styleNoTitle | GetPriceStyle() ); 
_SECTION_END();


//
// Total transaction value
//
_SECTION_BEGIN("Val(B)");
	intervalValue = stGetIntervalValue();
	
	maxIntervalValue = Max(HighestVisibleValue(intervalValue) * 2, 1);
	
	Plot( stAutoPrec(intervalValue), 
		  _DEFAULT_NAME(), 
		  ColorBlend( colorBlueGrey, GetChartBkColor(), 0.5  ),
		  styleHistogram | styleThick | styleOwnScale,
		  0,
		  maxIntervalValue,
		  0,
		  0,
		  5 );
	
_SECTION_END();


//
// Foreign transaction value, drawn over the transaction value above
//
_SECTION_BEGIN("Fg Val(B)");
	ffIntervalSellValue = stGetFFIntervalSellValue();
	ffIntervalBuyValue = stGetFFIntervalBuyValue();
	
	ffIntervalValue = ffIntervalBuyValue - ffIntervalSellValue;
	
	Plot( abs(ffIntervalValue), 
		  WriteIf(ffIntervalValue >= 0, "Net Buy (B)", "Net Sell (B)"), 
		  IIf( ffIntervalValue >= 0, colorBlue, colorOrange),
		  styleHistogram | styleThick | styleOwnScale | styleNoLabel,
		  Null,
		  maxIntervalValue,
		  0,
		  1,
		  3);
_SECTION_END();


//
// Foreign accummulation (balance)
//
_SECTION_BEGIN("Fg Lot");
	ffHolding = stGetFFHolding() / 100;
	
	ffHoldingMinScale = LowestVisibleValue(ffHolding) * 0.95;
	ffHoldingMaxScale = HighestVisibleValue(ffHolding) * 1.05;
	
	Plot( ffHolding, 
		  "Fg Lot", 
		  colorRed, 
		  styleLine | styleOwnScale | styleThick, 
		  ffHoldingMinScale, 
		  ffHoldingMaxScale, 
		  Null, 
		  2); 
_SECTION_END();

//
// Foreign average price
//
_SECTION_BEGIN("Fg Avg");
	ffAvg = stGetFFAverage();
	ffProfit = stProfit;
	
	Plot( ffAvg, "Fg Avg", colorGreen, styleDashed | styleThick | styleNoLabel); 
_SECTION_END();

//
// Foreign MA
//
_SECTION_BEGIN("Foreign MA");
	ffMaEnabled = ParamToggle("Enable Foreign MA", "No|Yes", 1);
	ffMAPeriod1 = Param("Foreign MA Period 1", 5, 1, 100);
	ffMAPeriod2 = Param("Foreign MA Period 2", 20, 1, 100);
	
	ffMA1 = MA(ffHolding, ffMAPeriod1);
	ffMA2 = MA(ffHolding, ffMAPeriod2);
	
	if (ffMaEnabled) {
		Plot( ffMA1, "Fg MA" + ffMAPeriod1, colorOrange, styleLine | styleOwnScale | styleNoLabel, ffHoldingMinScale, ffHoldingMaxScale, Null, 2);
		Plot( ffMA2, "Fg MA" + ffMAPeriod2, colorOrange, styleDashed | styleOwnScale | styleNoLabel, ffHoldingMinScale, ffHoldingMaxScale, Null, 2);
	}
_SECTION_END();

if (ffMaEnabled) {
	Buy = Cross( ffMA1, ffMA2) && (ffHolding >= ffMA1) && (C < ffAvg) && (ffIntervalValue > 1);
	//Plot(Buy, "Buy", colorBlack, styleNoLine | styleNoLabel | styleOwnScale);
	PlotShapes( Buy * shapeUpArrow, colorGreen, 0, Min(L, O)); 
}

if (True OR Status("action") == actionCommentary ) {
	score = ST_STATUS_NOP;
	if (Interval() == inDaily) {
		_N(reason = "");
		days = 3;
		
		avg3 = LastValue(Sum(ffIntervalValue,days)) / days;
		lastRatio = LastValue(Sum(abs(ffIntervalValue),days)) / LastValue(Sum(intervalValue, days));
		
		_N(detailReason =                  "Transaction value avg(" + days + ") \t: " + stAutoPrec(avg3));
		_N(detailReason = detailReason + "\nLast value                \t: " + stAutoPrec(LastValue(ffIntervalValue)));
		_N(detailReason = detailReason + "\nRatio                          \t: " + stAutoPrec(lastRatio * 100) + "%%");
		
		if (abs(avg3) < 2 OR lastRatio < 0.15) {
			// Avg foreign transaction is too low
			score = ST_STATUS_NOP;
			// Avg foreign transaction is too low (ratio wise)
			_N(reason = "Average transaction value or ratio is too low.\n\n" + detailReason);
		} else {
			score = stMARecommendation(ffHolding, ffMA1, ffMA2);
			
			_N(reason = stRecReason + ".\n" + detailReason);
		}
		
		printf("<b>" + Name() + " RECOMMENDATIONS:</b>\n");
		printf("----------------------------------------------\n");
		printf("<b>FOREIGN FLOW:  " + EncodeColor(stStatusColor(score)) + stRecText(score) + "</b>" + EncodeColor(colorBlack) + "\n");
		printf("" + reason + "\n");
		printf("----------------------------------------------\n");

		stDisplayRec(score, 1);
	}

}

_t1 = GetPerformanceCounter();
_TRACE(Name() + " Foreign price: " + Int(_t1 - _t0) + " ms");

