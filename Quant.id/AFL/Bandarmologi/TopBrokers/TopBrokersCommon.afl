/* 
 * Copyright (C)2017 PT. Stosia Teknologi Investasi
 *
 * This file is licensed under  GNU GPL (General Public License) version 3.
 *
 * File ini dilisensikan kepada Anda, bukan  Anda miliki.  Pemilik file ini
 * adalah pemegang  hak cipta ("copyright holder") di atas. Gunakanlah file
 * ini sesuai dengan lisensi yang telah ditetapkan untuk file ini.
 *
 * File ini  berlisensi  GNU GPL (General Public License)  versi 3. Artinya
 * kalau Anda  memodifikasi file ini, atau membuat karya lain yang berbasis
 * file ini  ("derivative work"),  maka Anda  wajib  mendistribusikan  kode
 * modifikasi atau karya tersebut kepada publik. Hal ini untuk menjaga agar
 * pengetahuan yang ada di sini menjadi lebih berkembang  di masa mendatang 
 * untuk kemajuan kita bersama.
 *
 * Silakan memakai kode ini untuk kepentingan apapun termasuk untuk mencari
 * profit di pasar saham baik secara perorangan atau organisasi, asal tidak
 * jahat. Sebagai tambahan permintaan, kami menghimbau untuk TIDAK  menjual
 * kode/file  ini secara  apa adanya  atau dalam bundel  produk yang dijual
 * secara komersial, karena hal itu tidak etis.
 *
 * Untuk penjelasan lebih lanjut silakan bertanya kepada kami.  Untuk detil
 * lisensi GPLv3  silakan lihat file GPLv3-LICENSE.md  yang didistribusikan
 * bersama file ini.
 *
 * Author: Benny Prijono <benny@stosia.com>
 * Contributors:
 *  - 
 */
#include_once <..\Quant.id\AFL\Bandarmologi\BandarmologiCommon.afl>

stBdTopBrokers = "";
stBdBrokerCnt = 0;

stBdParamDays = 0;
stBdParamTopCount = 3;
stBdParamAbs = False;

_N(stBdStartBalanceDate = "2016-07-01");
stBdStartDate = Null;

stBdBuyerColors = 0;
stBdBuyerColors[0] = colorBlue;
stBdBuyerColors[1] = colorDarkYellow;
stBdBuyerColors[2] = colorGreen;
stBdBuyerColors[3] = colorTurquoise;
stBdBuyerColors[4] = colorIndigo;
stBdBuyerColors[5] = colorLightBlue;

stBdSellerColors = 0;
stBdSellerColors[0] = colorRed;
stBdSellerColors[1] = colorOrange;
stBdSellerColors[2] = colorGreen;
stBdSellerColors[3] = colorDarkTeal;
stBdSellerColors[4] = colorDarkRed;
stBdSellerColors[5] = colorPink;

//
// Init top brokers chart
//
function stInitTopBrokers(is_master)
{
	global stBdTopBrokers, stBdBrokerCnt, stBdStartDate, stBdParamDays, stBdParamTopBrokerType,
		   stBdParamTopCount, stBdParamUseValue, stBdParamAbs, stBdStartBalanceDate;
	
	stConnectDatabase();
	
	if (is_master) {
		stBdParamDays = Param("Days", stBdParamDays, 0, 60);
		stBdParamTopBrokerType = ParamList("Buyer/Seller", "Both|Buyer|Seller", 0);
		stBdParamTopCount = Param("Brokers", stBdParamTopCount, 0, 5);
		stBdParamUseValue = ParamToggle("Use Value or Lot", "Lot|Value", 1);
		stBdParamAbs = ParamToggle("Absolute Value", "No|Yes", stBdParamAbs);
		sb = ParamDate("Start Balance", stBdStartBalanceDate, 0);
		_N( stBdStartBalanceDate = stDateNumToISODate(sb) );

		_N( stBdStartDate = stBdGetStartDate(stBdParamDays) );
		if (stBdStartDate < stBdStartBalanceDate)
			_N( stBdStartDate = stBdStartBalanceDate );
		
		if (stBdParamTopCount > 0) {
			odbcDisplayErrors(True);
			_N(sql = "call get_top_brokers('" + Name() + "', '" + stBdStartDate + "')");
			
			stBdTopBrokers = odbcGetValueSQL(sql);
			len = StrLen(stBdTopBrokers);
			if (len < 3) {
				stBdTopBrokers = "";
				len = 0;
			}
			stBdBrokerCnt = floor((len + 1) / 3);

			if (stBdBrokerCnt == 0) {
				stAlert("Error: broker summary for " + Name() + " is not available");
			}
		} else {
			_N(stBdTopBrokers = "");
			stBdBrokerCnt = 0;
		}
		
		
		StaticVarSet("stBdParamDays", stBdParamDays);
		StaticVarSetText("stBdParamTopBrokerType", stBdParamTopBrokerType);
		StaticVarSet("stBdParamTopCount", stBdParamTopCount);
		StaticVarSet("stBdParamUseValue", stBdParamUseValue);
		StaticVarSet("stBdParamAbs", stBdParamAbs);
		StaticVarSetText("stBdStartBalanceDate", stBdStartBalanceDate);
		
		StaticVarSetText("stBdStartDate", stBdStartDate);
		StaticVarSetText("stBdTopBrokers", stBdTopBrokers);
		StaticVarSet("stBdBrokerCnt", stBdBrokerCnt);
		
		stMasterChartSignalReady("stInitTopBrokers");
		
	} else {
		stSlaveChartWaitReady("stInitTopBrokers", 20);

		stBdStartDate = StaticVarGetText("stBdStartDate");
		stBdParamTopBrokerType = StaticVarGetText("stBdParamTopBrokerType");
		stBdTopBrokers = StaticVarGetText("stBdTopBrokers");
		stBdBrokerCnt = StaticVarGet("stBdBrokerCnt");
		
		stBdParamDays = StaticVarGet("stBdParamDays");
		stBdParamTopCount = StaticVarGet("stBdParamTopCount");
		stBdParamAbs = StaticVarGet("stBdParamAbs");
		stBdParamUseValue = StaticVarGet("stBdParamUseValue");
		_N( stBdStartBalanceDate = StaticVarGetText("stBdStartBalanceDate") );
	}
}

//
// Get number of brokers involved
//
function stBdGetBrokerCount()
{
	global stBdTopBrokers, stBdBrokerCnt;
	return stBdBrokerCnt;
}

//
// Get the name of the top buyer
//
function stBdGetTopBuyerName(index)
{
	global stBdTopBrokers, stBdBrokerCnt;
	return StrExtract(stBdTopBrokers, index);
}

//
// Get the name of the specified top seller
//
function stBdGetTopSellerName(index)
{
	global stBdTopBrokers, stBdBrokerCnt;
	return StrExtract(stBdTopBrokers, stBdBrokerCnt-index-1);
}

//
// Plot with name
//
function stBdPlot(brokerName, is_buyer, balance, color, style, index)
{
	Plot(balance, brokerName, color, style | styleThick | styleNoLabel, Null, Null, 0, 5);
	txtPos = 4;
	if (is_buyer)
		txtPos += 2;
	txtPos += (index * 2);
	PlotText( brokerName, BarCount-txtPos, balance[BarCount-txtPos], GetChartBkColor(), color, 0);
	x = LastValue( BarIndex() ) + IIf(is_buyer, 1, 3);
    y = LastValue( balance );
    fontsize = 10;
    
    PlotTextSetFont( brokerName, "Arial", fontsize, x, y, GetChartBkColor(), color, -fontsize/2 );
}

//
// Plot the specified broker's cummulative ownership (in Lot)
//
function stBdPlotBroker(brokerName, is_buyer, index)
{
	global stBdParamUseValue, stBdParamAbs, stBdStartBalanceDate;
	
	if (stBdParamUseValue)
		balance = stBdGetBrokerCumValue(brokerName, stBdStartBalanceDate);
	else
		balance = stBdGetBrokerCumShares(brokerName, stBdStartBalanceDate);
	
	if (is_buyer) {
		color = stBdBuyerColors[index];
		style = styleLine;
	} else {
		color = stBdSellerColors[index];
		style = styleDashed;
		
		if (stBdParamAbs) {
			balance = 0 - balance;
		} 
	}
	
	stBdPlot(brokerName, is_buyer, balance, color, style, index);
}

//
// Plot the specified top buyer
//
function stBdPlotBuyer(index)
{
	global stBdBrokerCnt;
	
	if (index < stBdBrokerCnt) {
		stBdPlotBroker(stBdGetTopBuyerName(index), True, index);
	}
}

//
// Plot the specified top seller
//
function stBdPlotSeller(index)
{
	if (index < stBdBrokerCnt) {
		seller = stBdGetTopSellerName(index);
		stBdPlotBroker(seller, False, index);
	}
}


