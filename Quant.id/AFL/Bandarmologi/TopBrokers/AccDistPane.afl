/* 
 * Copyright (C)2017 PT. Stosia Teknologi Investasi
 *
 * This file is licensed under  GNU GPL (General Public License) version 3.
 *
 * File ini dilisensikan kepada Anda, bukan  Anda miliki.  Pemilik file ini
 * adalah pemegang  hak cipta ("copyright holder") di atas. Gunakanlah file
 * ini sesuai dengan lisensi yang telah ditetapkan untuk file ini.
 *
 * File ini  berlisensi  GNU GPL (General Public License)  versi 3. Artinya
 * kalau Anda  memodifikasi file ini, atau membuat karya lain yang berbasis
 * file ini  ("derivative work"),  maka Anda  wajib  mendistribusikan  kode
 * modifikasi atau karya tersebut kepada publik. Hal ini untuk menjaga agar
 * pengetahuan yang ada di sini menjadi lebih berkembang  di masa mendatang 
 * untuk kemajuan kita bersama.
 *
 * Silakan memakai kode ini untuk kepentingan apapun termasuk untuk mencari
 * profit di pasar saham baik secara perorangan atau organisasi, asal tidak
 * jahat. Sebagai tambahan permintaan, kami menghimbau untuk TIDAK  menjual
 * kode/file  ini secara  apa adanya  atau dalam bundel  produk yang dijual
 * secara komersial, karena hal itu tidak etis.
 *
 * Untuk penjelasan lebih lanjut silakan bertanya kepada kami.  Untuk detil
 * lisensi GPLv3  silakan lihat file GPLv3-LICENSE.md  yang didistribusikan
 * bersama file ini.
 *
 * Author: Benny Prijono <benny@stosia.com>
 * Contributors:
 *  - 
 */
_t0 = GetPerformanceCounter();
#include_once <..\Quant.id\AFL\Bandarmologi\TopBrokers\TopBrokersCommon.afl>

_SECTION_BEGIN("Top Brokers Acc/Dist");
	// Init bandarmologi as slave
	stInitTopBrokers(False);

	stExcludeRetail = ParamToggle("Exclude retail brokers", "No|Yes", 1);

	if (stBdParamUseValue)
		_N(satuan = "(B Rp)");
	else
		_N(satuan = "(Lot)");
		
	_N(Title = StrFormat("Acc/Dist " + satuan + " -- {{VALUES}}"));
	
	brokerCount = 0;
	sellersTotal = 0;
	_N(sellersName = "");
	for (i=0; i<stBdParamTopCount; ++i) {
		_N(brokerName = stBdGetTopSellerName(i));
		if (stExcludeRetail && StrFind(ST_RETAIL_BROKERS, brokerName) != 0)
			continue;
		
		_N(sellersName = sellersName + brokerName + " ");
		
		if (stBdParamUseValue)
			balance = stBdGetBrokerCumValue(brokerName, stBdStartBalanceDate);
		else
			balance = stBdGetBrokerCumShares(brokerName, stBdStartBalanceDate);
			
		sellersTotal += balance;
		brokerCount += 1;
	}
	
	buyersTotal = 0;
	_N(buyersName = "");
	for (i=0; i<stBdParamTopCount; ++i) {
		_N(brokerName = stBdGetTopBuyerName(i));
		if (stExcludeRetail && StrFind(ST_RETAIL_BROKERS, brokerName) != 0)
			continue;
			
		_N(buyersName = buyersName + brokerName + " ");
		
		if (stBdParamUseValue)
			balance = stBdGetBrokerCumValue(brokerName, stBdStartBalanceDate);
		else
			balance = stBdGetBrokerCumShares(brokerName, stBdStartBalanceDate);
			
		buyersTotal += balance;
		brokerCount += 1;
	}

	// Background text
	stSetBackgroundTitle(Name() + " Top " + brokerCount + " Brokers Acc/Dist");
	stSetBackgroundSubtitle(QID_VERSION_LINE);
	
	Plot(stAutoPrec(buyersTotal), 
		 "Total top buyers (" + buyersName + ")", 
		 colorLightBlue, 
		 styleDashed | styleThick);
	
	Plot(stAutoPrec(sellersTotal), 
		 "Total top sellers (" + sellersName + ")", 
		 colorLightOrange, 
		 styleDashed | styleThick);
	
	intBuyer = buyersTotal  - Ref(buyersTotal, -1);
	intSeller = sellersTotal - Ref(sellersTotal, -1);
	
	//netBroker = buyersTotal - sellersTotal;
	netBroker = intBuyer + intSeller;
	
	Plot(stAutoPrec(abs(netBroker)),
		 "Net " + WriteIf(netBroker >= 0, "Accummulation", "Distribution"), 
		 IIf(netBroker >= 0, ColorBlend(colorLightBlue, GetChartBkColor(), 0.3), 
							 ColorBlend(colorLightOrange, GetChartBkColor(), 0.3)),
		 styleHistogram | styleThick | styleOwnScale,
		 0,
		 HighestVisibleValue(abs(netBroker)) * 1.5,
		 0,
		 0,
		 5);
	
	accDistBalance = Cum(netBroker);
	Plot(stAutoPrec(accDistBalance),
		 "Cummulative Acc/Dist", 
		 colorLightBlue,
		 styleLine | styleThick,
		 Null,
		 Null,
		 0,
		 1,
		 2);
		 
_SECTION_END();

_t1 = GetPerformanceCounter();
_TRACE(Name() + " AccDist Pane: " + Int(_t1 - _t0) + " ms");

