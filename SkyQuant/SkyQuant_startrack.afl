/*******************************************************************************************/
// SkyQuant for AmiBroker
// http://skyquant.googlecode.com - HomeSite
// http://groups.google.com/group/skyquant - Forum
// You may use, copy, distribute, modify SkyQuant under the terms of
// the GNU General Public License (GPL) Version 2, 2012
/*******************************************************************************************/
#include <SkyQuant\SQ_header.afl>;

pi = 3.1415926;
SObjects = ParamList("Select Space Objects", "Planets|Stars" );
Line = ParamList("Select Line", "Normal|Cosinusoid|Sinusoid" );

		SetChartOptions(0,chartShowArrows|chartShowDates);
showarrow = ParamToggle( "Show Arrows", "No|Yes", defaultval = 0 ); 
ZeroLine = ParamToggle( "Show ZeroLine", "No|Yes", defaultval = 0 ); 
	if( showarrow )
	{
		Plot( C, "Close", ParamColor("Color", colorBlack ), styleNoTitle | ParamStyle("Style") | GetPriceStyle() );
	}

PList1 = "0,1,2,3,4,5,6,7,8,9,11";
PList2 = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30";
_N( PList1 = ParamStr("Planets", PList1 ) );
_N( PList2 = ParamStr("Stars", PList2 ) );

pMax = 0;
p1arr = p2arr = -1;


////////////////////////////////////

if( SObjects == "Planets" )
{
for( pp = 0; StrExtract( PList1, pp ) != ""; pp++ )
{
	p = StrToNum( StrExtract( PList1, pp ) );
	if( p > pMax ) pMax = p;
	p1arr[pp] = p;
}
for( pp1 = 0; p1arr[pp1] >= 0; pp1++ )
{
	p = p1arr[pp1];
	eph = EPHEMERIS( "P", p, iflag, cpos );
		pName = SQname(p);
	printf( SQname(p) + "\t|  " + ZODIACNAME(zod[bx]) + 
		" %0.0f°%0.0f'   (#%0.0f)\n", floor(grad1), grad2, p ); 

	if( showarrow )
	{
		zch = Param( "ZigZag Change", 0.05, 0, 50, 0.01 );
		fSHOWARROWS( p, eph, zch );
		SetChartOptions(0,chartShowArrows|chartShowDates);
		_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 ) ) ));
	}


		switch (Line)
		{
			case "Normal": 		Plot( eph, pName, pColors[p], styleLeftAxisScale ); 			break;
			case "Cosinusoid": 	Plot( cos(eph * (pi / 180)), pName, pColors[p], styleLeftAxisScale );	break; 
			case "Sinusoid":		Plot( sin(eph * (pi / 180)), pName, pColors[p], styleLeftAxisScale );	break; 
		}
}}

////////////////////////////////////
if( SObjects == "Stars" )
{
for( pp = 0; StrExtract( PList2, pp ) != ""; pp++ )
{
	p = StrToNum( StrExtract( PList2, pp ) );
	if( p > pMax ) pMax = p;
	p1arr[pp] = p;
}
fh = fopen( ABpath + "SkyQuant\\ephe\\fixstars.cat", "r");
if( fh ) 
{ 
	s = 1;
   while( ! feof( fh ) ) 
   { 
		str = fgets( fh );
		sName = StrExtract( str, 0 ) + "," + StrExtract( str, 1 );
		VarSetText( "star_" + s++, sName );
	}
	fclose( fh );
}
Clr = Param( "Colors chain", 16, 0, 56, 1 );
for( pp1 = 0; p1arr[pp1] >= 0; pp1++ )
{
	p = p1arr[pp1];
	eph = EPHEMERIS( "S", p, iflag, cpos );

	if( showarrow )
	{
		zch = Param( "ZigZag Change", 0.005, 0, 5, 0.001 );
		fSHOWARROWS( p, eph, zch );
		SetChartOptions(0,chartShowArrows|chartShowDates);
		_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 ) ) ));
	}

		printf( VarGetText( "star_" + p ) + "\t|  " + ZODIACNAME(zod[bx]) + 
		" %0.0f°%0.0f'\n(#%0.0f)\t|   %0.5f\n---------------------------------------\n",
			 floor(grad1), grad2, p, eph[bx] );

		switch (Line)
		{
			case "Normal": 		Plot( eph, NumToStr(p), Clr+p, styleOwnScale ); 					break;
			case "Cosinusoid": 	Plot( cos(eph * (pi / 180)), NumToStr(p), Clr+p, styleOwnScale );	break; 
			case "Sinusoid":		Plot( sin(eph * (pi / 180)), NumToStr(p), Clr+p, styleOwnScale );	break; 
		}
}}

if(ZeroLine)
	Plot( 0, "", colorBlue, styleLeftAxisScale|styleNoLabel|styleDashed );
//	Plot( 0.59, "REN-TV Line", colorRed, styleLeftAxisScale|styleNoLabel|styleThick );
//