/*******************************************************************************************/
// SkyQuant for AmiBroker
// http://skyquant.googlecode.com - HomeSite
// http://groups.google.com/group/skyquant - Forum
// You may use, copy, distribute, modify SkyQuant under the terms of
// the GNU General Public License (GPL) Version 2, 2012 - 2013
/*******************************************************************************************/
#include <SkyQuant\SQ_header.afl>;

forecast = ParamList("Forecasting method",
 	"Transit|Secondary Progression|Tertiary Sidereal Progression|Tertiary Synodic Progression
|Minor Progression|Minor Progression 1/12|Minor Synodic Progression|Direction|Profection" );

bf_tg = ParamToggle("Forward or Backward", "Forward|Backward", defaultval = 0 );
	switch( bf_tg )
	{
		case 0:	
		{	
			bf = 1;
			bf_str = "F";
		}		break;
		case 1: 
		{	
			bf = -1;
			bf_str = "B";
		}		break;
	}

	switch( forecast )
	{
		case "Transit": 
		{	
			mode = "P";
			sbl = -25;
			prg_type = 0;
			method = 1;
		}		break;

		case "Secondary Progression": 
		{	
			mode = "G1";
			sbl = -26;
			prg_type = 1;
			method = 3;
		}		break;

		case "Tertiary Sidereal Progression": // Третичная прогрессия
		{	
			mode = "G2";
			sbl = -26;
			prg_type = 2;
			method = 3;
		}		break;

		case "Tertiary Synodic Progression": 
		{	
			mode = "G3";
			sbl = -26;
			prg_type = 3;
			method = 3;
		}		break;
		case "Minor Progression":  // Минорная прогрессия
		{	
			mode = "G4";
			sbl = -26;
			prg_type = 4;
			method = 3;
		}		break;

		case "Minor Progression 1/12":
		{	
			mode = "G5";
			sbl = -26;
			prg_type = 5;
			method = 3;
		}		break;

		case "Minor Synodic Progression": 
		{	
			mode = "G6";
			sbl = -26;
			prg_type = 6;
			method = 3;
		}		break;

		case "Direction": // Zodiacal 
		{	
			mode = "D1";
			sbl = -26;
			dir_type = 1;
			method = 4;
		}		break;

		case "Profection": // Zodiacal 
		{	
			mode = "D7";
			sbl = -26;
			dir_type = 7;
			method = 4;
		}		break;
	}
mode += bf_str;

PList1 = "1,0,2,3,4,5,6,7,8,9,11";
PList2 =  "12,15,11,9,8,7,6,5,4,3,2,0,1";
_N( PList1 = ParamStr("Planets Natal", PList1 ) );
_N( PList2 = ParamStr("Planets Aspecting", PList2 ) );
_N( AnglesList = ParamStr("Angles", "0,90,180,60,120") );
pMax = 0;
allPl = 0;
p1arr = p2arr = -1;
for( pp2 = 0; StrExtract( PList1, pp2 ) != ""; pp2++ )
{
	p = StrToNum( StrExtract( PList1, pp2 ) );
	allPl[p] = 1;
	if( p > pMax ) pMax = p;
	p1arr[pp2] = p;
}
for( pp2 = 0; StrExtract( PList2, pp2 ) != ""; pp2++ )
{
	p = StrToNum( StrExtract( PList2, pp2 ) );
	allPl[p] = 1;
	if( p > pMax ) pMax = p;
	p2arr[pp2] = p;
}

tzx = TZ[bx];
ddx = Day();
dd = ddx[bx];
mmx = Month();
mm = mmx[bx];
yyx = Year();
yy = yyx[bx];
hhhx = Hour();
hhh = Hhhx[bx];
mmmx = Minute();
mmm = mmmx[bx];
sssx = Second();
sss = sssx[bx];
printf( "%0.0f,%0.0f,%0.0f,%0.0f,%0.0f,%0.0f,%0.0f,%0.0f\n",
	 tzx, dd, mm, yy, hhh, mmm, sss, BarIndex() );

nx = bx;
DT = DateTime();
NDT = ParamStr( "Natal Date/Time", "" );
if( NDT != "" ){
			n = 0;
			tzx = 	StrToNum( StrExtract( NDT, n++ ) );
			dd = 	StrToNum( StrExtract( NDT, n++ ) );
			mm = 	StrToNum( StrExtract( NDT, n++ ) );
			yy = 	StrToNum( StrExtract( NDT, n++ ) );
			hhh = 	StrToNum( StrExtract( NDT, n++ ) );
			mmm = 	StrToNum( StrExtract( NDT, n++ ) );
			sss = 	StrToNum( StrExtract( NDT, n++ ) );
			nx = 	StrToNum( StrExtract( NDT, n++ ) );
	printf( "\nNatal fixed @ %2.0f.%2.0f.%4.0f   %2.0f:%2.0f\n", dd, mm, yy, hhh, mmm );
	if( nx >= 0 ){
		diff = DateTimeDiff( DT[bx], DT[nx] ) / 3600;
		printf( "Years \t| Days \t| Hours\n%0.1f \t| %0.0f \t| %0.1f\n", diff/24/365.2422, diff/24, diff );
	}
}
else 	printf( "\n Date/Time is NOT fixed\n" );
printf( "_______________________\n" );


GfxSetBkMode(1); 
GfxSetTextColor( colorBlue ); 
y1 = 35;
titleStr = "";
//ys = (pxchartbottom - y1) / (p1Count + 1) / 4.2;
Hfont = ys * 1.8;
GfxSelectFont("Tahoma", Hfont, 500 );
nl = 0;

for(p = 0; p <= pMax; p++)
{
	if( allPl[p] > 0 ){
		EPHEMERIS( mode, p, iflag, cpos );
		printf( SQname(p) + "\t|  " + ZODIACNAME(zod[bx]) + 
			" %0.0f°%0.0f' \t#%0.0f\n", floor(grad1), grad2, p ); 
	}
}

printf( "\n Natal - " + forecast + "\t|  Aspect \n" );
for( pp1 = 0; p1arr[pp1] >= 0; pp1++ )
{
	p1 = p1arr[pp1];
		natal = SQntl( pMax, iflag, cpos, tzx, dd, mm, yy, hhh, mmm, sss );
		nat = natal[p1];
	GfxSetTextColor( colorBlue ); 
	bgc = GetChartBkColor(); 
	for( pp2 = 0; p2arr[pp2] >= 0; pp2++ ) 
	{
		p2 = p2arr[pp2];
		transit = VarGet("eph" + mode + p2);
		ang = ANGLE( nat, transit );
		grad2 = 60 * frac(ang);
		printf( SQname(p1) + " - " + SQname(p2) + " \t|  %0.0f°%0.0f'" 
			+ PRINTASP(ang[bx], ORB, p1, p2) + "\n", floor(ang), grad2 );
				_N(Title = "Aspects: " + titleStr);
		for( angN = 0; StrExtract( AnglesList, angN ) != ""; angN++ )
		{
			aspect = StrToNum( StrExtract( AnglesList, angN ) ) ;
			ORB = OrbisBase[floor(aspect)];
				if( aspect == 51 ) aspect = 51.42857; // 360 / 7;
			else if( aspect == 102 ) aspect = 102.85714; // 360 / 7 * 2;
			else if( aspect == 154 ) aspect = 154.28571; // 360 / 7 * 3;
			for( i = 2; i < Min( Lvb - fvb, BarCount - fvb ) ; i++ ) 
			{
				b = i + fvb;
				asp = ang[b];
				if( aspect-ORB <= asp && asp <= aspect+ORB )
				{
					Color = ColorBlend( bgc[b] , ASPCOLOR(aspect), (ORB-abs(aspect-asp))/ORB );
					GfxSelectSolidBrush( Color );
					GfxSelectPen( Color );  
 					x = pxchartleft + i  * pxchartwidth / ( lvb - fvb + 1 );

 					y = y1 + ys * nl * 4; 
					GfxGradientRect( x - barw/2, y-ys+7, x + barw/2, y+ys, bgc[b], color );
					y = y + ys * 2;  
					GfxGradientRect( x - barw/2, y-ys, x + barw/2, y+ys-7, color, bgc[b] );
					bgc[b] = color;
 
					if( ( aspect != 0 && ang[i+fvb-1] >= aspect && ang[i+fvb] < aspect
						|| ang[i+fvb-1] <= aspect && ang[i+fvb] > aspect ) OR
						( aspect == 0 && ang[i+fvb-2] > ang[i+fvb-1]
							&& ang[i+fvb-1] <= ang[i+fvb] ) OR 
						( aspect == 180 && ang[i+fvb-2] < ang[i+fvb-1]
							&& ang[i+fvb-1] >= ang[i+fvb] ))
					{
						GfxSetTextAlign( 2 );
						gx = 45;
						gy = y - ys * 4.3;
						GfxSetTextColor( pColors[p1] ); 
						SYMBOL( p1, Hfont, x-gx, gy );
						gx -= 14;
						GfxSetTextColor( STICKCOLOR (aspect) );
						SYMBOL( -1000-aspect, Hfont, x-gx, gy );
						gx -= 14;
						GfxSetTextColor( pColors[p2] );
						SYMBOL( p2, Hfont, x-gx, gy );
						gx -= 9;
						SYMBOL( sbl, Hfont*0.9, gx = x-gx, gy );
						GfxSelectPen( STICKCOLOR (aspect) ); 
						GfxSelectSolidBrush( STICKCOLOR (aspect) );
						GfxRoundRect( x - barw/4, y-ys*4.5, x + barw/4, y+ys*0.5, 10, 10 ); 
					}
				}
			}
		}
	}
	GfxSetTextAlign( 0 );
	GfxSetTextColor( pColors[p1] ); 
	y = y1 + ys * nl * 4;
	SYMBOL( -24, Hfont*0.9, 0, y-6 );
	SYMBOL( p1, Hfont, ys*2.4, y-7 );
	nl++;
}

//